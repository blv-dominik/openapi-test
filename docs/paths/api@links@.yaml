get:
  tags:
    - Links
  operationId: ListLinks
  summary: List all links
  description: >- 
    Get a paginated list of all the existing links in your Belvo account. By default, we return up to 100 results per page.
  parameters:
    - name: page
      required: false
      in: query
      description: A page number within the paginated result set.
      schema:
        type: integer
        format: int32
        example: 1
    - name: page_size
      required: false
      in: query
      description: |
        Indicates how many results to return per page. By default we return 100 results per page. 
    
        ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
      schema:
        type: integer
        format: int32
        default: 100
        minimum: 1
        maximum: 1000
        example: 100
    - name: access_mode
      in: query
      description: Return links only with this access mode. Can be either `single` or `recurrent`.
      schema:
        type: string
        example: single
    - name: created_at
      in: query
      description: Return links that were last updated in Belvo's database on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-05-01
    - name: created_at__gt
      in: query
      description: Return links that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-05-05
    - name: created_at__gte
      in: query
      description: Return links that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-05-04
    - name: created_at__lt
      in: query
      description: Return links that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-04-01
    - name: created_at__lte
      in: query
      description: Return links that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-03-30
    - name: created_at__range
      in: query
      description: Return links that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
      schema:
        type: string
        example: 2022-03-03,2022-05-04
    - name: created_by__not_in
      in: query
      description: Return links that were not created by these Belvo users.
      schema:
        type: string
        example: 578947e2-3c9a-4401-bbad-59b2f2d2b91b,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e
    - name: external_id
      in: query
      description: Return links with this external ID.
      schema:
        type: string
        example: InternalUser4000
    - name: external_id__in
      in: query
      description: Return links with these external IDs.
      schema:
        type: string
        example: InternalUser4000,InternalUser4001
    - name: id
      in: query
      description: Return information only for this `link.id`.
      schema:
        type: string
        example: 73694155-b871-41ec-94e3-37d17ff62b5d
    - name: id__in
      in: query
      description: Return information only for these `link.id`s.
      schema:
        type: string
        example: 73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
    - name: institution
      in: query
      description: Return links created for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).
      schema:
        type: string
        example: erebor_mx_retail
    - name: institution__in
      in: query
      description: Return links created for these institutions (use the Belvo-designated name, such as `erebor_mx_retail` and `gringotts_co_retail`).
      schema:
        type: string
        example: erebor_mx_retail,gringotts_co_retail
    - name: institution_user_id
      in: query
      description: Return links with this specific institution user ID.
      schema:
        type: string
        example: ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=
    - name: institution_user_id__in
      in: query
      description: Return links with these institution user IDs.
      schema:
        type: string
        example: ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=,YwuTM0uEEh1BbVgDZBcNpa_-Tm3l2q8ZkZNrlhp-pNA=
    - name: refresh_rate
      in: query
      description: Return links with this refresh rate. Choose between `6h`, `12h`, `24h`, `7d`, or `30d`.
      schema:
        type: string
        example: 24h
    - name: status
      in: query
      description: Return links with this status. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.
      schema:
        type: string
        example: invalid
    - name: status__in
      in: query
      description: Return links with these statuses. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.
      schema:
        type: string
        example: invalid,unconfirmed
  responses:
    '200':
      description: Ok
      content:
        application/json:
          schema:
            $ref: ../components/responses/PaginatedResponseLink.yaml
    '401':
      description: Authentication to Belvo API failed
      content:
        application/json:
          schema:
            type: array
            description: >-
              This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).
            items:
              $ref: ../components/errors/UnauthorizedError.yaml
  x-readme:
    code-samples:
      - language: cURL
        code: |
          curl https://sandbox.belvo.com/api/links/ \
            -u [Secret Key ID]:[Secret Key PASSWORD]
      - language: python
        name: Belvo Python SDK
        code: |
          # check our python-client library on github
          # https://github.com/belvo-finance/belvo-python
          from pprint import pprint
          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # List links
          for link in client.Links.list():
              pprint(link)
      - language: ruby
        name: Belvo Ruby SDK
        code: |
          # check our Ruby gem on github
          # https://github.com/belvo-finance/belvo-ruby
          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          sandbox.links.list
      - language: node
        name: Belvo Node SDK
        code: |
          // check our node package on github
          // https://github.com/belvo-finance/belvo-js

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.links.list()
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
post:
  tags:
    - Links
  operationId: RegisterLink
  summary: Register a new link
  description: >
    Register a new link with your Belvo account.


    <div style="background-color:#f4f6f8; border-left: 6px solid
    #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
    25px">

    <strong>Note: </strong> We recommend using our <a
    href="https://developers.belvo.com/docs/connect-widget"
    target="_blank">Connect Widget</a> to handle link creation and link status
    updates.

    </div>
  parameters: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../components/requestBodies/LinksRequest.yaml
  responses:
    '201':
      description: Created
      content:
        application/json:
          schema:
            $ref: ../components/schemas/links/Link.yaml
    '400':
      description: Bad request error
      content:
        application/json:
          schema:
            type: array
            items:
              anyOf:
              - $ref: ../components/errors/TooManySessionsError.yaml
              - $ref: ../components/errors/SessionExpiredError.yaml
              - $ref: ../components/errors/ValidationError.yaml
              - $ref: ../components/errors/InstitutionDownError.yaml
              - $ref: ../components/errors/InstitutionUnavailableError.yaml
              - $ref: ../components/errors/InstitutionInactiveError.yaml
              - $ref: ../components/errors/UnsupportedOperationError.yaml
              - $ref: ../components/errors/InvalidLinkError.yaml
              - $ref: ../components/errors/UnconfirmedLinkError.yaml
    '401':
      description: Authentication to Belvo API failed
      content:
        application/json:
          schema:
            type: array
            description: >-
              This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).
            items:
              $ref: ../components/errors/UnauthorizedError.yaml
    '428':
      description: MFA Token Required
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../components/responses/TokenRequiredResponse.yaml
    '500':
      description: Unexpected Error
      content:
        application/json:
          schema:
            type: array
            title: Unexpected Error
            description: >-
              This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.
                
            items:
              $ref: ../components/errors/UnexpectedError.yaml
  x-readme:
    code-samples:
      - language: cURL
        code: |
          curl -X POST \
            https://sandbox.belvo.com/api/links/ \
            -H 'Content-Type: application/json' \
            -H 'Host: sandbox.belvo.com' \
            -H 'cache-control: no-cache' \
            -d '{
              "institution": "",
              "username": "",
              "password": ""
          }' \
            -u [Secret Key ID]:[Secret Key PASSWORD]
      - language: python
        name: Belvo Python SDK
        code: |
          # check our python-client library on github
          # https://github.com/belvo-finance/belvo-python
          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Register a link
          link = client.Links.create(
              institution="erebor_mx_retail",
              username="johndoe",
              password="supersecret"
          )
      - language: ruby
        name: Belvo Ruby SDK
        code: |
          # check our Ruby gem on github
          # https://github.com/belvo-finance/belvo-ruby
          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          sandbox.links.register(
            institution: 'erebor_mx_retail',
            username: 'johndoe',
            password: 'supersecret'
          )
      - language: node
        name: Belvo Node SDK
        code: |
          // check our node package on github
          // https://github.com/belvo-finance/belvo-js

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
patch:
  tags:
    - Links
  operationId: PatchLinks
  summary: Complete a links request
  description: >-
    Used to resume a Link register session that was paused because an MFA token
    was required by the institution.
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../components/requestBodies/PatchBodyWithoutSaveData.yaml
  responses:
    '200':
      description: Ok
      content:
        application/json:
          schema:
            $ref: ../components/schemas/links/Link.yaml
    '400':
      description: Bad request error
      content:
        application/json:
          schema:
            type: array
            items:
              anyOf:
              - $ref: ../components/errors/TooManySessionsError.yaml
              - $ref: ../components/errors/SessionExpiredError.yaml
              - $ref: ../components/errors/ValidationError.yaml
              - $ref: ../components/errors/InstitutionDownError.yaml
              - $ref: ../components/errors/InstitutionUnavailableError.yaml
              - $ref: ../components/errors/InstitutionInactiveError.yaml
              - $ref: ../components/errors/UnsupportedOperationError.yaml
              - $ref: ../components/errors/InvalidLinkError.yaml
              - $ref: ../components/errors/UnconfirmedLinkError.yaml
    '401':
      description: Authentication to Belvo API failed
      content:
        application/json:
          schema:
            type: array
            description: >-
              This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).
            items:
              $ref: ../components/errors/UnauthorizedError.yaml
    '428':
      description: MFA Token Required
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../components/responses/TokenRequiredResponse.yaml
    '500':
      description: Unexpected Error
      content:
        application/json:
          schema:
            type: array
            title: Unexpected Error
            description: >-
              This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.
                
            items:
              $ref: ../components/errors/UnexpectedError.yaml
  x-readme:
    code-samples:
      - language: cURL
        code: |
          curl -X PATCH \
            https://sandbox.belvo.com/api/links/ \
            -H 'Content-Type: application/json' \
            -H 'Host: sandbox.belvo.com' \
            -H 'cache-control: no-cache' \
            -d '{
                "session": "",
                "token": "",
                "link": ""
            }' \
            -u [Secret Key ID]:[Secret Key PASSWORD]
      - language: python
        name: Belvo Python SDK
        code: |
          # check our python-client library on github
          # https://github.com/belvo-finance/belvo-python
          from belvo.client import Client

          # Login to Belvo API
          client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

          # Resume a link
          link = client.Links.resume(
            session="session_id",
            token="token",
            link="link_id"
          )
      - language: ruby
        name: Belvo Ruby SDK
        code: |
          # check our Ruby gem on github
          # https://github.com/belvo-finance/belvo-ruby
          require 'belvo'

          sandbox = Belvo::Client.new(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          )

          sandbox.links.resume(
            session_id: 'your-session-id',
            token: 'otp-token',
            link: 'link-id'
          )
      - language: node
        name: Belvo Node SDK
        code: |
          // check our node package on github
          // https://github.com/belvo-finance/belvo-js

          var belvo = require('belvo').default;

          var client = new belvo(
            'Secret Key ID',
            'Secret Key PASSWORD',
            'sandbox'
          );

          client.connect()
            .then(function () {
              client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')
                .then(function (res) {
                  console.log(res);
                })
                .catch(function (error) {
                  console.log(error);
                });
          });
